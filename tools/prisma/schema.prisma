generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Provider {
  email
  github
  google
}

enum Visibility {
  public
  private
}

model User {
  id               String   @id @default(cuid())
  name             String
  picture          String?
  username         String   @unique
  email            String   @unique
  locale           String   @default("en-US")
  emailVerified    Boolean  @default(false)
  twoFactorEnabled Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  provider         Provider
  secrets          Secrets?
  resumes          Resume[]
  orders           Order[]
}

model Secrets {
  id                   String   @id @default(cuid())
  password             String?
  lastSignedIn         DateTime @default(now())
  verificationToken    String?
  twoFactorSecret      String?
  twoFactorBackupCodes String[] @default([])
  refreshToken         String?
  resetToken           String?  @unique
  userId               String   @unique
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, id])
}

model Resume {
  id         String      @id @default(cuid())
  title      String
  slug       String
  data       Json        @default("{}")
  visibility Visibility  @default(private)
  locked     Boolean     @default(false)
  statistics Statistics?
  userId     String
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@unique([userId, id])
  @@unique([userId, slug])
  @@index(fields: [userId])
}

model Statistics {
  id        String   @id @default(cuid())
  views     Int      @default(0)
  downloads Int      @default(0)
  resumeId  String   @unique
  resume    Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([resumeId, id])
}

model Product {
  id          String      @id @default(cuid())
  productCode String   @unique
  productName String
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum OrderType {
  VM_SERVE_VIP
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}
model Order {
  id            String      @id @default(cuid())
  orderCode     String   @unique
  orderType     OrderType
  products      String[] // array of strings
  orderStatus   OrderStatus
  quantity      Int
  totalPrice    Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relation to User
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relation to Payment
  payment       Payment?
}

model Payment {
  id            String   @id @default(cuid())
  order         Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId       String   @unique
  tradeNo       String   // 支付宝交易号
  qrCode        String   // 支付二维码
  traceId       String   // 跟踪ID
  amount        Float    // 支付金额
  status        String   // 支付状态
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
}